CODE TO WORK WITH BOTH THE PICKLED (PYTHON) AND SQL VERSION OF THE DIKB
Author: Richard Boyce 03/06/2012

################################################################################
NOTES ON LOADING DATA FROM THE SQL DIKB INTO PICKLE FORMAT
################################################################################

The file test_dikb.py shows how to load evidence data from the sql dikb into
pickle format. The basic code is below. 

TODO: At the present time, there is not a script that shows how to
easily load the drug model into python -- write one.

<example>

import os,sys, string, cgi
from time import time, strftime, localtime

import sys
sys.path = sys.path + ['.']

from mysql_tool import *
from DIKB_Load import load_ev_from_db

from sqlalchemy import func
from sqlalchemy.orm.exc import NoResultFound, MultipleResultsFound

from DIKB.ModelUtils import *
from DIKB.DIKB import *
from DIKB.DrugModel import *
from DIKB.EvidenceModel import *

ident = "".join(["Current SQL DIKB evidence : ", timestamp])
sqlEv = load_ev_from_db(ident)

</example>


################################################################################
NOTES ON LOADING DATA INTO MYSQL
################################################################################

- The script create-SQL-DIKB-from-pickle.py can be modified to take
DIKB data in pickle format and convert it to an SQL database which can
then be loaded into mysql. The script outputs a test.db which is an
SQLite database file. This needs to be brought into mysql in order for
D2R to serve it. The process is as follows (from http://sqlite.phxsoftware.com/forums/t/941.aspx):

<example>

SQLite ----> MySql

   1. Download sqlite3.exe on http://www.sqlite.org
   2. Export the SQLite database with sqlite3.exe and command parameter ".dump"
      sqlite3 mySQLiteDataBase .dump  >> myDumpSQLite # NOTE THAT THE FILE IS BEING APPENDED!!!
   3. Adapt the dump to get it compatible for MySQL
        - Replace " (double-quotes) with ` (grave accent)
        - Remove "BEGIN TRANSACTION;" "COMMIT;", and lines related to "sqlite_sequence"
        - Replace "autoincrement" with "auto_increment"
   4. The dump is ready to get imported in a MySQL server
      
</example>

- With the MySQL ready file, you can load it into mysql as follows:

1) create the database: 
$ create database dikbEvidence;

2) $ use dikbEvidence;

3) $ source  <mysql-formatted file name >;


################################################################################
HOW TO LOAD DDI PREDICTIONS INTO THE DIKB
################################################################################

1) Edit the exported assertions (assertions.lisp) and changing
assumptions (changing_assumptions.lisp) files created by
create-SQL-DIKB-from-pickle.py so that commas and backquoted along
with any parentheses in metabolite names
(e.g. 4-(4-chlorophenyl)-4-hydroxypiperidine should be 4-\(4-chlorophenyl\)-4-hydroxypiperidine)

2) Change to the folder "/home/boycerd/DI_DIR/lisp/jtms" and remove the exported assertions (assertions.lisp) and changing
assumptions (changing_assumptions.lisp) files and create symbolic
links to the ones written when create-SQL-DIKB-from-pickle.py  was ran

3) run an inferior lisp mode that uses the Common Lisp dialect and
enter:

$ (load "load")
$ (simple-dikb-rule-engine)

4) If everything runs successfully, then clear the emacs buffer and
iteratively execute the function call 'GET-PKI-TO-TSV' over all of the
drug classes defined in 'drug-class-a-list'. For example:

$ (GET-PKI-TO-TSV PKI-1 "PKI-1" "fourth-tier" 'statins)
$ (GET-PKI-TO-TSV PKI-1 "PKI-1" "fourth-tier" 'antidepressants)
...

5) copy the accumulated output to a new text file and clean up the
unecessary strings so that the file can be imported into Excel or
OpenOffice as a spreadsheet. 

6) load the tab-delimitted file from step 5 into Excel or
OpenOffice as a spreadsheet and export it as a comma-delimited file
with quotes around the strings.

7) Lets say the CSV file from step 6 is named "DDI-predictions.csv"
and that the file resides in the directory from which you initiate a
MySQL shell. Do the following in the MySQL database that you loaded the DIKB into:

CREATE TABLE `DDIPredictions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `OBJECT` varchar(100) DEFAULT NULL,
  `PRECIPITANT` varchar(100) DEFAULT NULL,
  `ENZYME` varchar(100) DEFAULT NULL,
  `LEVEL` varchar(10) DEFAULT NULL,
  `TIER` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

LOAD DATA LOCAL INFILE './DDI-predictions.csv' INTO TABLE DDIPredictions FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' (OBJECT, PRECIPITANT, ENZYME, LEVEL, TIER); 


################################################################################
SOME USEFUL SPARQL QUERIES FOR VALIDATING THE SQL DIKB
################################################################################

SELECT DISTINCT * WHERE {
  {?s dikbD2R:Drugs_inhibition_constant "cyp3a4"} UNION {?s dikbD2R:Drugs_inhibits "cyp3a4"}
}

Slightly different results than:

<example>

SELECT DISTINCT * WHERE {
  ?s dikbD2R:Drugs_inhibits "cyp3a4".
}

</example>

Or..

<example>

SELECT DISTINCT * WHERE {
  ?s dikbD2R:Drugs_inhibition_constant "cyp3a4".
}

</example>

Also interesting:


<example>

SELECT DISTINCT * WHERE {
  ?p dikbD2R:Drugs_increases_auc ?o.
  ?o dikbD2R:Drugs_active_ingredient_name "alprazolam".
}


################################################################################
SOME NOTES ON THE ASSERTION AND EVIDENCE SCHEMA
################################################################################

To find each Evidence_for and Evidence_against items for an Assertion

1. In the Assertion table, get either the Evidence_for or Evidence_against ID
2. Match the ID from the Assertions table, to the Assert_Ev_ID in the Evidence_map table
3. When you find the match, take the ID from Evidence_map and match it the ID in Evidence


To find an Assumption for an Evidence item:

1. In the Evidence table, get the Assump_List_Id
2. Match the Assump_List_Id from the Evidence table to the ID in the Assump_map table


To find each Assertion or Drug for an ESlot and EMultiSlot:

1. In the ESlot or EMultiSlot table, get the D_Slot_Id
2. Match the D_Slot_id to the D_Slot_Id in the Evidence_Slot_Map table
3. When you find the match, you can get Assert_Id and Drug_Id
4. Match the Assert_Id to the ID in the Assertions table for the corresponding Assertion for the ESlot or EMultiSlot
5. Match the Drug_Id to the ID in the Drugs table for the corresponding Drug for the ESlot or EmultiSlot

To find the Value of a Continous EMultiSlot:

1. In the EMultiSlot table for a Continous Value Slot, get the Value_Id
2. Match the Value_Id from the EMultiSlot table to the Value_Id in the Value table
3. When you find the match, you can the Value_numeric
4. Match the Value_numeric from the Value table to the ID in the Assertion table
5. The values are in the cont_val and numeric_val columns