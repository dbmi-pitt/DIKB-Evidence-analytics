;; Object jtms/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "jtms/"
  :tables (list 
   (semanticdb-table "my-test.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [86 116]) ("simplest-ddi-jtre" function nil nil [118 1025]) ("socrates-jtre" function nil nil [1028 3747]) ("test-retract-propogation" function nil nil [3767 5551]) ("test-default-semantics" function nil nil [5553 6882]))
    :file "my-test.lisp"
    :pointmax 6905
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jtms.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1258 1288]) ("jtms" type (:members ("title" "node-counter" "just-counter" "nodes" "justs" "debugging" "contradictions" "assumptions" "checking-contradictions" "node-string" "contradiction-handler" "enqueue-procedure") :type "struct") nil [1290 1902]) ("print-jtms" function (:arguments ("jtms" "stream" "ignore")) nil [1904 2021]) ("tms-node" type (:members ("index" "datum" "label" "support" "justs" "consequences" "mark" "contradictory?" "assumption?" "in-rules" "out-rules" "jtms") :type "struct") nil [2023 2740]) ("print-tms-node" function (:arguments ("node" "stream" "ignore")) nil [2792 2914]) ("just" type (:members ("index" "informant" "consequence" "antecedents") :type "struct") nil [2916 3015]) ("print-just" function (:arguments ("just" "stream" "ignore")) nil [3017 3133]) ("tms-node-premise\\?" function (:arguments ("node" "&aux" "support")) nil [3135 3314]) ("node-string" function (:arguments ("node")) nil [3340 3423]) ("debugging-jtms" function (:arguments ("jtms" "msg" "&optional" "node" "&rest" "args")) nil [3425 3592]) ("tms-error" function (:arguments ("string" "node")) nil [3594 3659]) ("default-node-string" function (:arguments ("n")) nil [3661 3729]) ("create-jtms" function (:arguments ("title" "&key" "node-string" "debugging" "checking-contradictions" "contradiction-handler" "enqueue-procedure")) nil [3731 4261]) ("change-jtms" function (:arguments ("jtms" "&key" "contradiction-handler" "node-string" "enqueue-procedure" "debugging" "checking-contradictions")) nil [4269 4843]) ("in-node\\?" function (:arguments ("node")) nil [4885 4939]) ("out-node\\?" function (:arguments ("node")) nil [4941 4997]) ("tms-create-node" function (:arguments ("jtms" "datum" "&key" "assumptionp" "contradictoryp")) nil [4999 5414]) ("assume-node" function (:arguments ("node" "&aux" "jtms")) nil [5477 5711]) ("make-contradiction" function (:arguments ("node" "&aux" "jtms")) nil [5713 5944]) ("justify-node" function (:arguments ("informant" "consequence" "antecedents" "&aux" "just" "jtms")) nil [5946 6677]) ("check-justification" function (:arguments ("just")) nil [6720 6837]) ("justification-satisfied\\?" function (:arguments ("just")) nil [6839 6924]) ("install-support" function (:arguments ("conseq" "just")) nil [6926 7020]) ("propagate-inness" function (:arguments ("node" "&aux" "jtms" "q")) nil [7022 7418]) ("make-node-in" function (:arguments ("conseq" "reason" "&aux" "jtms" "enqueuef")) nil [7420 7991]) ("retract-assumption" function (:arguments ("node" "&aux" "jtms")) nil [8022 8326]) ("enable-assumption" function (:arguments ("node" "&aux" "jtms")) nil [8328 8864]) ("make-node-out" function (:arguments ("node" "&aux" "jtms" "enqueuef")) nil [8866 9257]) ("propagate-outness" function (:arguments ("node" "jtms" "&aux" "out-queue")) nil [9259 9900]) ("find-alternative-support" function (:arguments ("jtms" "out-queue")) nil [9902 10224]) ("check-for-contradictions" function (:arguments ("jtms" "&aux" "contradictions")) nil [10264 10561]) ("contradiction-check" function (:arguments ("jtms" "flag" "body")) nil [10564 10893]) ("without-contradiction-check" function (:arguments ("jtms" "&body" "body")) nil [10896 10990]) ("with-contradiction-check" function (:arguments ("jtms" "&body" "body")) nil [10992 11081]) ("with-contradiction-handler" function (:arguments ("jtms" "handler" "&body" "body")) nil [11083 11435]) ("default-assumptions" function (:arguments ("jtms")) nil [11437 11916]) ("supporting-justification-for-node" function (:arguments ("node")) nil [11954 12026]) ("assumptions-of-node" function (:arguments ("node" "&aux" "assumptions" "marker")) nil [12028 12498]) ("enabled-assumptions" function (:arguments ("jtms" "&aux" "result")) nil [12500 12691]) ("why-node" function (:arguments ("node" "&aux" "justification")) nil [12762 13230]) ("why-nodes" function (:arguments ("jtms")) nil [13232 13308]) ("proclaim" code nil nil [13310 13352]) ("ask-user-handler" function (:arguments ("jtms" "contradictions")) nil [13354 13484]) ("handle-one-contradiction" function (:arguments ("contra-node" "&aux" "the-answer" "*contra-assumptions*")) nil [13486 14201]) ("print-contra-list" function (:arguments ("nodes")) nil [14203 14376]) ("tms-answer" function (:arguments ("num")) nil [14378 14694]) ("explore-network" function (:arguments ("node")) nil [14698 15713]))
    :file "jtms.lisp"
    :pointmax 15714
    :unmatched-syntax 'nil
    )
   (semanticdb-table "unify.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1181 1211]) ("unify" function (:arguments ("a" "b" "&optional" "bindings")) nil [1338 1686]) ("unify-variable" function (:arguments ("var" "exp" "bindings" "&aux" "val")) nil [1688 1973]) ("free-in\\?" function (:arguments ("var" "exp" "bindings")) nil [1975 2337]))
    :file "unify.lisp"
    :pointmax 2338
    :unmatched-syntax 'nil
    )
   (semanticdb-table "load.lisp"
    :major-mode 'lisp-mode
    :tags '(("compile-file" code nil nil [282 318]) ("load" code nil nil [320 339]) ("load" code nil nil [340 360]) ("load" code nil nil [361 380]) ("load" code nil nil [381 401]) ("load" code nil nil [402 422]) ("load" code nil nil [423 441]) ("load" code nil nil [442 463]) ("load" code nil nil [464 492]))
    :file "load.lisp"
    :pointmax 493
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jdata.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1203 1233]) ("dbclass" type (:members ("name" "jtre" "facts" "rules") :type "struct") nil [1273 1435]) ("jtre-dbclass-printer" function (:arguments ("r" "st" "ignore")) nil [1458 1576]) ("datum" type (:members ("id" "lisp-form" "tms-node" "dbclass" "assumption?" "plist") :type "struct") nil [1578 1917]) ("jtre-datum-printer" function (:arguments ("d" "st" "ignore")) nil [1949 2057]) ("assert!" function (:arguments ("fact" "just" "&optional" "*JTRE*" "&aux" "datum" "node")) nil [2084 2434]) ("rassert!" function (:arguments ("fact" "just")) nil [2436 2512]) ("quiet-assert!" function (:arguments ("fact" "just" "&optional" "*JTRE*")) nil [2514 2644]) ("assume!" function (:arguments ("fact" "reason" "&optional" "*JTRE*" "&aux" "datum" "node")) nil [2646 3155]) ("already-assumed\\?" function (:arguments ("fact")) nil [3157 3226]) ("retract!" function (:arguments ("fact" "&optional" "just" "quiet?" "*JTRE*" "&aux" "datum" "node")) nil [3246 3912]) ("rretract!" function (:arguments ("fact" "&optional" "just")) nil [3914 4010]) ("contradiction" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4012 4124]) ("in\\?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4163 4279]) ("out\\?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4281 4399]) ("why\\?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4405 4522]) ("assumptions-of" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4524 4674]) ("fetch" function (:arguments ("pattern" "&optional" "*JTRE*" "&aux" "bindings" "unifiers")) nil [4676 4950]) ("wfs" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4993 5646]) ("say-datum-belief" function (:arguments ("pr" "&optional" "*jtre*" "indent")) nil [5648 5820]) ("show-justifications" function (:arguments ("fact" "&optional" "*jtre*")) nil [5822 6360]) ("show-data" function (:arguments ("&optional" "*JTRE*" "stream")) nil [6362 6718]) ("get-dbclass" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "dbclass")) nil [6743 7393]) ("referent" function (:arguments ("fact" "&optional" "virtual?" "*JTRE*")) nil [7395 7514]) ("referent1" function (:arguments ("fact")) nil [7516 7670]) ("insert" function (:arguments ("fact" "&aux" "datum")) nil [7672 8079]) ("get-candidates" function (:arguments ("pattern")) nil [8081 8153]) ("map-dbclass" function (:arguments ("proc" "&optional" "*JTRE*")) nil [8155 8332]) ("get-tms-node" function (:arguments ("fact" "&optional" "*JTRE*")) nil [8334 8424]) ("view-node" function (:arguments ("node")) nil [8426 8492]) ("show-datum" function (:arguments ("datum")) nil [8521 8591]) ("get-datum" function (:arguments ("num" "&optional" "*JTRE*")) nil [8593 8807]) ("get-just" function (:arguments ("num" "&optional" "*JTRE*")) nil [8809 8975]))
    :file "jdata.lisp"
    :pointmax 8976
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jinter.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1175 1205]) ("jtre" type (:members ("title" "jtms" "dbclass-table" "datum-counter" "rule-counter" "debugging" "queue" "rules-run") :type "struct") nil [1208 1609]) ("jtre-printer" function (:arguments ("j" "st" "ignore")) nil [1632 1708]) ("*JTRE*" variable nil nil [1710 1729]) ("With-Jtre" function (:arguments ("jtre" "&rest" "forms")) nil [1731 1805]) ("In-Jtre" function (:arguments ("jtre")) nil [1807 1848]) ("debugging-jtre" function (:arguments ("msg" "&rest" "args")) nil [1850 1950]) ("create-jtre" function (:arguments ("title" "&key" "debugging")) nil [1952 2284]) ("change-jtre" function (:arguments ("jtre" "&key" "debugging")) nil [2286 2409]) ("uassert!" function (:arguments ("fact" "&optional" "just")) nil [2431 2545]) ("uassume!" function (:arguments ("fact" "reason")) nil [2571 2676]) ("run-forms" function (:arguments ("forms" "&optional" "*JTRE*")) nil [2678 2784]) ("run" function (:arguments ("&optional" "*JTRE*")) nil [2786 3043]) ("show" function (:arguments ("&optional" "*JTRE*" "stream")) nil [3045 3167]))
    :file "jinter.lisp"
    :pointmax 3169
    :unmatched-syntax 'nil
    )
   (semanticdb-table "funify.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1402 1432]) ("proclaim" code nil nil [1434 1468]) ("quotize" function (:arguments ("pattern")) nil [1470 1713]) ("rlet" function (:arguments ("var-specs" "&rest" "body")) nil [1715 2206]) ("pattern-free-variables" function (:arguments ("pattern")) nil [2250 2325]) ("pattern-free-vars1" function (:arguments ("pattern" "vars")) nil [2327 2641]) ("generate-match-body" function (:arguments ("pattern" "vars" "extra-test" "&aux" "structure-tests" "var-alist" "equal-tests" "binding-specs")) nil [2674 3462]) ("generate-pairwise-tests" function (:arguments ("tests")) nil [3464 3647]) ("generate-unify-tests" function (:arguments ("pattern" "vars" "tests" "path")) nil [4097 5241]))
    :file "funify.lisp"
    :pointmax 5244
    )
   (semanticdb-table "jrules.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1181 1211]) ("proclaim" code nil nil [1213 1272]) ("rule" type (:members ("id" "jtre" "dbclass" "matcher" "body") :type "struct") nil [1274 1517]) ("jtre-rule-printer" function (:arguments ("r" "st" "ignore")) nil [1558 1663]) ("*file-counter*" variable nil nil [1665 1690]) ("*file-prefix*" variable nil nil [1691 1716]) ("Rule-File" function (:arguments ("prefix")) nil [1718 1845]) ("rule" function (:arguments ("triggers" "&rest" "body")) nil [1884 1945]) ("do-rule" function (:arguments ("triggers" "body")) nil [1947 2248]) ("internal-rule" function (:arguments ("triggers" "&rest" "body")) nil [2250 2380]) ("make-nested-rule" function (:arguments ("triggers" "body")) nil [2382 2546]) ("add-internal-rule" function (:arguments ("trigger" "body")) nil [2548 2619]) ("build-rule" function (:arguments ("trigger" "body" "&aux" "match-procedure" "body-procedure")) nil [2653 3722]) ("parse-rule-trigger" function (:arguments ("trigger")) nil [3724 4032]) ("get-trigger-dbclass" function (:arguments ("trigger")) nil [4034 4296]) ("with-pushed-variable-bindings" function (:arguments ("new-bindings" "&rest" "body")) nil [4334 4527]) ("generate-body-procedure" function (:arguments ("pattern" "condition" "var" "body" "&aux" "newly-bound" "env" "fname")) nil [4529 5519]) ("generate-match-procedure" function (:arguments ("pattern" "var" "test" "condition")) nil [5521 5958]) ("scratchout" function (:arguments ("l1" "l2")) nil [5960 6074]) ("generate-rule-procedure-name" function (:arguments ("pattern")) nil [6076 6201]) ("*macros-to-expand*" variable (:default-value (quote (rule rlet rassert! rretract! internal-rule add-internal-rule with-pushed-variable-bindings without-contradiction-check with-contradiction-check with-contradiction-handler with-JTRE))) nil [6235 6460]) ("fully-expand-body" function (:arguments ("body")) nil [6462 6804]) ("insert-rule" function (:arguments ("dbclass" "matcher" "body" "&aux" "rule")) nil [6827 7170]) ("try-rules" function (:arguments ("datum")) nil [7172 7282]) ("try-rule-on" function (:arguments ("rule" "datum")) nil [7284 7618]) ("run-rules" function (:arguments ("&optional" "*JTRE*")) nil [7620 7902]) ("rules-waiting\\?" function (:arguments ("jtre")) nil [7904 7951]) ("enqueue" function (:arguments ("new" "j")) nil [7953 8002]) ("dequeue" function (:arguments ("jtre")) nil [8004 8050]) ("show-rules" function (:arguments ("&optional" "*JTRE*" "stream")) nil [8076 8461]) ("print-rule" function (:arguments ("rule" "&optional" "stream")) nil [8463 8604]) ("test-rule-expansion" function nil nil [8606 8744]) ("get-rule" function (:arguments ("num" "&optional" "*JTRE*")) nil [8746 8946]))
    :file "jrules.lisp"
    :pointmax 8947
    :unmatched-syntax 'nil
    )
   (semanticdb-table "jtest.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1195 1225]) ("shakedown-jtre" function nil nil [1227 2657]))
    :file "jtest.lisp"
    :pointmax 2658
    :unmatched-syntax 'nil
    )
   (semanticdb-table "dikb-inference-test.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1257 1287]) ("ieee-demo-rule-base" function nil nil [1289 5324]) ("patient-specific-rule-base" function nil nil [5326 7919]) ("test-negation" function nil nil [7922 8899]) ("load-demo-rule-base" function nil nil [8902 11609]) ("patient-specific-rule-base" function nil nil [11611 14204]) ("test-ddi-rule-base" function nil nil [14207 19420]) ("first-ddi-rule-base" function nil nil [19424 21009]) ("explanation" function (:arguments ("fact" "f-name" "&optional" "*JTRE*")) nil [21408 23776]) ("prescribe" function (:arguments ("patient" "new-drg")) nil [23780 25765]))
    :file "dikb-inference-test.lisp"
    :pointmax 25982
    :unmatched-syntax 'nil
    )
   (semanticdb-table "assertions.lisp"
    :major-mode 'lisp-mode
    :tags '(("assume!" code nil nil [1 61]) ("assume!" code nil nil [62 124]) ("assume!" code nil nil [125 184]) ("assume!" code nil nil [185 245]) ("assume!" code nil nil [246 307]) ("assume!" code nil nil [308 370]) ("assume!" code nil nil [371 432]) ("assume!" code nil nil [433 493]) ("assume!" code nil nil [494 554]) ("assume!" code nil nil [555 618]) ("assume!" code nil nil [619 680]) ("assume!" code nil nil [681 743]) ("assume!" code nil nil [744 805]) ("assume!" code nil nil [806 870]) ("assume!" code nil nil [871 937]) ("assume!" code nil nil [938 1002]) ("assume!" code nil nil [1003 1068]) ("assume!" code nil nil [1069 1130]) ("assume!" code nil nil [1131 1196]) ("assume!" code nil nil [1197 1264]) ("assume!" code nil nil [1265 1350]) ("assume!" code nil nil [1351 1437]) ("assume!" code nil nil [1438 1524]) ("assume!" code nil nil [1525 1608]) ("assume!" code nil nil [1609 1692]) ("assume!" code nil nil [1693 1783]) ("assume!" code nil nil [1784 1873]) ("assume!" code nil nil [1874 1964]) ("assume!" code nil nil [1965 2031]) ("assume!" code nil nil [2032 2097]) ("assume!" code nil nil [2098 2161]) ("assume!" code nil nil [2162 2227]) ("assume!" code nil nil [2228 2294]) ("assume!" code nil nil [2295 2359]) ("assume!" code nil nil [2360 2440]) ("assume!" code nil nil [2441 2513]) ("assume!" code nil nil [2514 2585]) ("assume!" code nil nil [2586 2657]) ("assume!" code nil nil [2658 2728]) ("assume!" code nil nil [2729 2808]) ("assume!" code nil nil [2809 2881]) ("assume!" code nil nil [2882 2953]) ("assume!" code nil nil [2954 3046]))
    :file "assertions.lisp"
    :pointmax 3047
    )
   (semanticdb-table "jinter.lisp~"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [434 464]) ("jtre" type (:members ("title" "jtms" "dbclass-table" "datum-counter" "rule-counter" "debugging" "queue" "rules-run") :type "struct") nil [467 868]) ("jtre-printer" function (:arguments ("j" "st" "ignore")) nil [891 967]) ("*JTRE*" variable nil nil [969 988]) ("With-Jtre" function (:arguments ("jtre" "&rest" "forms")) nil [990 1064]) ("In-Jtre" function (:arguments ("jtre")) nil [1066 1107]) ("debugging-jtre" function (:arguments ("msg" "&rest" "args")) nil [1109 1209]) ("create-jtre" function (:arguments ("title" "&key" "debugging")) nil [1211 1543]) ("change-jtre" function (:arguments ("jtre" "&key" "debugging")) nil [1545 1668]) ("uassert!" function (:arguments ("fact" "&optional" "just")) nil [1690 1804]) ("uassume!" function (:arguments ("fact" "reason")) nil [1830 1935]) ("run-forms" function (:arguments ("forms" "&optional" "*JTRE*")) nil [1937 2043]) ("run" function (:arguments ("&optional" "*JTRE*")) nil [2045 2302]) ("show" function (:arguments ("&optional" "*JTRE*" "stream")) nil [2304 2426]))
    :file "jinter.lisp~"
    :pointmax 2428
    )
   (semanticdb-table "scratch"
    :major-mode 'lisp-mode
    :tags '(("format" code nil nil [2 202]) ("format" code nil nil [203 284]) ("show-data" code nil nil [285 296]) ("format" code nil nil [316 386]) ("format" code nil nil [388 488]) ("run-rules" code nil nil [489 500]) ("format" code nil nil [501 701]) ("format" code nil nil [721 802]) ("show-data" code nil nil [803 814]) ("format" code nil nil [826 1051]) ("format" code nil nil [1053 1286]) ("format" code nil nil [1288 1376]) ("retract!" code nil nil [1377 1470]) ("format" code nil nil [1472 1676]) ("format" code nil nil [1714 1847]) ("show-data" code nil nil [1848 1859]) ("setq" code nil nil [1861 1904]) ("prescribe" function (:arguments ("patient" "new-drg")) nil [1906 2455]) ("setq" code nil nil [2471 2492]) ("fetch" code nil nil [2493 2590]))
    :file "scratch"
    :pointmax 8344
    )
   (semanticdb-table "jtms.lisp~"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [517 547]) ("jtms" type (:members ("title" "node-counter" "just-counter" "nodes" "justs" "debugging" "contradictions" "assumptions" "checking-contradictions" "node-string" "contradiction-handler" "enqueue-procedure") :type "struct") nil [549 1161]) ("print-jtms" function (:arguments ("jtms" "stream" "ignore")) nil [1163 1280]) ("tms-node" type (:members ("index" "datum" "label" "support" "justs" "consequences" "mark" "contradictory?" "assumption?" "in-rules" "out-rules" "jtms") :type "struct") nil [1282 1999]) ("print-tms-node" function (:arguments ("node" "stream" "ignore")) nil [2051 2173]) ("just" type (:members ("index" "informant" "consequence" "antecedents") :type "struct") nil [2175 2274]) ("print-just" function (:arguments ("just" "stream" "ignore")) nil [2276 2392]) ("tms-node-premise?" function (:arguments ("node" "&aux" "support")) nil [2394 2573]) ("node-string" function (:arguments ("node")) nil [2599 2682]) ("debugging-jtms" function (:arguments ("jtms" "msg" "&optional" "node" "&rest" "args")) nil [2684 2851]) ("tms-error" function (:arguments ("string" "node")) nil [2853 2918]) ("default-node-string" function (:arguments ("n")) nil [2920 2988]) ("create-jtms" function (:arguments ("title" "&key" "node-string" "debugging" "checking-contradictions" "contradiction-handler" "enqueue-procedure")) nil [2990 3520]) ("change-jtms" function (:arguments ("jtms" "&key" "contradiction-handler" "node-string" "enqueue-procedure" "debugging" "checking-contradictions")) nil [3528 4102]) ("in-node?" function (:arguments ("node")) nil [4144 4198]) ("out-node?" function (:arguments ("node")) nil [4200 4256]) ("tms-create-node" function (:arguments ("jtms" "datum" "&key" "assumptionp" "contradictoryp")) nil [4258 4673]) ("assume-node" function (:arguments ("node" "&aux" "jtms")) nil [4736 4970]) ("make-contradiction" function (:arguments ("node" "&aux" "jtms")) nil [4972 5203]) ("justify-node" function (:arguments ("informant" "consequence" "antecedents" "&aux" "just" "jtms")) nil [5205 5936]) ("check-justification" function (:arguments ("just")) nil [5979 6096]) ("justification-satisfied?" function (:arguments ("just")) nil [6098 6183]) ("install-support" function (:arguments ("conseq" "just")) nil [6185 6279]) ("propagate-inness" function (:arguments ("node" "&aux" "jtms" "q")) nil [6281 6677]) ("make-node-in" function (:arguments ("conseq" "reason" "&aux" "jtms" "enqueuef")) nil [6679 7250]) ("retract-assumption" function (:arguments ("node" "&aux" "jtms")) nil [7281 7585]) ("enable-assumption" function (:arguments ("node" "&aux" "jtms")) nil [7587 8123]) ("make-node-out" function (:arguments ("node" "&aux" "jtms" "enqueuef")) nil [8125 8516]) ("propagate-outness" function (:arguments ("node" "jtms" "&aux" "out-queue")) nil [8518 9159]) ("find-alternative-support" function (:arguments ("jtms" "out-queue")) nil [9161 9483]) ("check-for-contradictions" function (:arguments ("jtms" "&aux" "contradictions")) nil [9523 9820]) ("contradiction-check" function (:arguments ("jtms" "flag" "body")) nil [9823 10152]) ("without-contradiction-check" function (:arguments ("jtms" "&body" "body")) nil [10155 10249]) ("with-contradiction-check" function (:arguments ("jtms" "&body" "body")) nil [10251 10340]) ("with-contradiction-handler" function (:arguments ("jtms" "handler" "&body" "body")) nil [10342 10694]) ("default-assumptions" function (:arguments ("jtms")) nil [10696 11175]) ("supporting-justification-for-node" function (:arguments ("node")) nil [11213 11285]) ("assumptions-of-node" function (:arguments ("node" "&aux" "assumptions" "marker")) nil [11287 11757]) ("enabled-assumptions" function (:arguments ("jtms" "&aux" "result")) nil [11759 11950]) ("why-node" function (:arguments ("node" "&aux" "justification")) nil [12021 12489]) ("why-nodes" function (:arguments ("jtms")) nil [12491 12567]) ("proclaim" code nil nil [12569 12611]) ("ask-user-handler" function (:arguments ("jtms" "contradictions")) nil [12613 12743]) ("handle-one-contradiction" function (:arguments ("contra-node" "&aux" "the-answer" "*contra-assumptions*")) nil [12745 13460]) ("print-contra-list" function (:arguments ("nodes")) nil [13462 13635]) ("tms-answer" function (:arguments ("num")) nil [13637 13953]) ("explore-network" function (:arguments ("node")) nil [13957 14972]))
    :file "jtms.lisp~"
    :pointmax 14973
    )
   (semanticdb-table "explanation.html"
    :major-mode 'html-mode
    :tags 'nil
    :file "explanation.html"
    :pointmax 19999
    )
   (semanticdb-table "jdata.lisp~"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1203 1233]) ("dbclass" type (:members ("name" "jtre" "facts" "rules") :type "struct") nil [1273 1435]) ("jtre-dbclass-printer" function (:arguments ("r" "st" "ignore")) nil [1458 1576]) ("datum" type (:members ("id" "lisp-form" "tms-node" "dbclass" "assumption?" "plist") :type "struct") nil [1578 1917]) ("jtre-datum-printer" function (:arguments ("d" "st" "ignore")) nil [1949 2057]) ("assert!" function (:arguments ("fact" "just" "&optional" "*JTRE*" "&aux" "datum" "node")) nil [2084 2434]) ("rassert!" function (:arguments ("fact" "just")) nil [2436 2512]) ("quiet-assert!" function (:arguments ("fact" "just" "&optional" "*JTRE*")) nil [2514 2644]) ("assume!" function (:arguments ("fact" "reason" "&optional" "*JTRE*" "&aux" "datum" "node")) nil [2646 3155]) ("already-assumed?" function (:arguments ("fact")) nil [3157 3226]) ("retract!" function (:arguments ("fact" "&optional" "just" "quiet?" "*JTRE*" "&aux" "datum" "node")) nil [3246 3912]) ("rretract!" function (:arguments ("fact" "&optional" "just")) nil [3914 4010]) ("contradiction" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4012 4124]) ("in?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4163 4279]) ("out?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4281 4399]) ("why?" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "r")) nil [4405 4522]) ("assumptions-of" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4524 4674]) ("fetch" function (:arguments ("pattern" "&optional" "*JTRE*" "&aux" "bindings" "unifiers")) nil [4676 4950]) ("wfs" function (:arguments ("fact" "&optional" "*JTRE*")) nil [4993 5646]) ("say-datum-belief" function (:arguments ("pr" "&optional" "*jtre*" "indent")) nil [5648 5820]) ("show-justifications" function (:arguments ("fact" "&optional" "*jtre*")) nil [5822 6360]) ("show-data" function (:arguments ("&optional" "*JTRE*" "stream")) nil [6362 6718]) ("get-dbclass" function (:arguments ("fact" "&optional" "*JTRE*" "&aux" "dbclass")) nil [6743 7393]) ("referent" function (:arguments ("fact" "&optional" "virtual?" "*JTRE*")) nil [7395 7514]) ("referent1" function (:arguments ("fact")) nil [7516 7670]) ("insert" function (:arguments ("fact" "&aux" "datum")) nil [7672 8079]) ("get-candidates" function (:arguments ("pattern")) nil [8081 8153]) ("map-dbclass" function (:arguments ("proc" "&optional" "*JTRE*")) nil [8155 8332]) ("get-tms-node" function (:arguments ("fact" "&optional" "*JTRE*")) nil [8334 8424]) ("view-node" function (:arguments ("node")) nil [8426 8492]) ("show-datum" function (:arguments ("datum")) nil [8521 8591]) ("get-datum" function (:arguments ("num" "&optional" "*JTRE*")) nil [8593 8807]) ("get-just" function (:arguments ("num" "&optional" "*JTRE*")) nil [8809 8975]))
    :file "jdata.lisp~"
    :pointmax 8976
    )
   (semanticdb-table "funify.lisp~"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [465 495]) ("proclaim" code nil nil [499 533]) ("quotize" function (:arguments ("pattern")) nil [537 786]) ("rlet" function (:arguments ("var-specs" "&rest" "body")) nil [790 1295]) ("pattern-free-variables" function (:arguments ("pattern")) nil [1343 1419]) ("pattern-free-vars1" function (:arguments ("pattern" "vars")) nil [1423 1747]) ("generate-match-body" function (:arguments ("pattern" "vars" "extra-test" "&aux" "structure-tests" "var-alist" "equal-tests" "binding-specs")) nil [1784 2592]) ("generate-pairwise-tests" function (:arguments ("tests")) nil [2596 2782]) ("generate-unify-tests" function (:arguments ("pattern" "vars" "tests" "path")) nil [3245 4420]))
    :file "funify.lisp~"
    :pointmax 4424
    )
   (semanticdb-table "demo.lisp"
    :major-mode 'lisp-mode
    :tags '(("load" code nil nil [186 199]) ("load-demo-rule-base" code nil nil [221 242]) ("show-data" code nil nil [384 395]) ("load" code nil nil [396 415]) ("show-data" code nil nil [499 510]) ("load" code nil nil [511 530]) ("show-data" code nil nil [548 559]) ("load" code nil nil [675 688]) ("load-demo-rule-base" code nil nil [689 710]) ("setq" code nil nil [711 754]) ("prescribe" code nil nil [756 786]) ("retract!" code nil nil [943 1022]) ("load" code nil nil [1174 1187]) ("setq" code nil nil [1188 1239]) ("show-data" code nil nil [1240 1267]) ("progn" code nil nil [1269 1484]) ("progn" code nil nil [1486 1824]) ("progn" code nil nil [1826 1953]))
    :file "demo.lisp"
    :pointmax 1954
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
